{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\haide\\\\Desktop\\\\University\\\\db ai\\\\leetcode-project\\\\front-end\\\\src\\\\components\\\\Study.js\",\n  _s = $RefreshSig$();\n// src/components/Study.js\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst topics = [{\n  id: 1,\n  name: 'Arrays',\n  description: 'Arrays are used to store multiple values in a single variable.'\n}, {\n  id: 2,\n  name: 'Linked List',\n  description: 'A linked list is a linear data structure consisting of a sequence of elements called nodes.'\n}, {\n  id: 3,\n  name: 'Stacks',\n  description: 'Stacks are linear data structures that follow the Last In First Out (LIFO) principle.'\n}, {\n  id: 4,\n  name: 'Queues',\n  description: 'Queues are linear data structures that follow the First In First Out (FIFO) principle.'\n}, {\n  id: 5,\n  name: 'Hashing',\n  description: 'Hashing is a technique used to uniquely identify a specific object from a collection of similar objects.'\n}, {\n  id: 6,\n  name: 'Trees',\n  description: 'A tree is a non-linear data structure consisting of a collection of nodes such that each node has a value and references to its children.'\n}, {\n  id: 7,\n  name: 'Binary Search Trees',\n  description: 'A binary search tree (BST) is a binary tree with the property that the left child’s value is less than the parent node, and the right child’s value is greater.'\n}, {\n  id: 8,\n  name: 'Graphs',\n  description: 'A graph is a collection of nodes (vertices) and edges that connect pairs of nodes.'\n}, {\n  id: 9,\n  name: 'Dynamic Programming',\n  description: 'Dynamic programming is a method for solving problems by breaking them down into simpler subproblems and solving each subproblem only once.'\n}, {\n  id: 10,\n  name: 'Greedy Algorithms',\n  description: 'Greedy algorithms are a class of algorithms that make the locally optimal choice at each stage in the hope of finding the global optimum.'\n}];\nconst Study = () => {\n  _s();\n  const [selectedTopic, setSelectedTopic] = useState(null);\n  const handleTopicClick = topic => {\n    if (selectedTopic === topic.id) {\n      setSelectedTopic(null); // Close the topic if it’s already open\n    } else {\n      setSelectedTopic(topic.id); // Show details for the selected topic\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Code Academy - DSA Topics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"topics-list\",\n      children: topics.map(topic => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"topic-item\",\n        onClick: () => handleTopicClick(topic),\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: topic.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 13\n        }, this), selectedTopic === topic.id && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: topic.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 15\n        }, this)]\n      }, topic.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(Study, \"HoUpVK9/BsKL+8OvaequZp7ANK0=\");\n_c = Study;\nexport default Study;\nvar _c;\n$RefreshReg$(_c, \"Study\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","topics","id","name","description","Study","_s","selectedTopic","setSelectedTopic","handleTopicClick","topic","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","onClick","_c","$RefreshReg$"],"sources":["C:/Users/haide/Desktop/University/db ai/leetcode-project/front-end/src/components/Study.js"],"sourcesContent":["// src/components/Study.js\r\nimport React, { useState } from 'react';\r\n\r\nconst topics = [\r\n  { id: 1, name: 'Arrays', description: 'Arrays are used to store multiple values in a single variable.' },\r\n  { id: 2, name: 'Linked List', description: 'A linked list is a linear data structure consisting of a sequence of elements called nodes.' },\r\n  { id: 3, name: 'Stacks', description: 'Stacks are linear data structures that follow the Last In First Out (LIFO) principle.' },\r\n  { id: 4, name: 'Queues', description: 'Queues are linear data structures that follow the First In First Out (FIFO) principle.' },\r\n  { id: 5, name: 'Hashing', description: 'Hashing is a technique used to uniquely identify a specific object from a collection of similar objects.' },\r\n  { id: 6, name: 'Trees', description: 'A tree is a non-linear data structure consisting of a collection of nodes such that each node has a value and references to its children.' },\r\n  { id: 7, name: 'Binary Search Trees', description: 'A binary search tree (BST) is a binary tree with the property that the left child’s value is less than the parent node, and the right child’s value is greater.' },\r\n  { id: 8, name: 'Graphs', description: 'A graph is a collection of nodes (vertices) and edges that connect pairs of nodes.' },\r\n  { id: 9, name: 'Dynamic Programming', description: 'Dynamic programming is a method for solving problems by breaking them down into simpler subproblems and solving each subproblem only once.' },\r\n  { id: 10, name: 'Greedy Algorithms', description: 'Greedy algorithms are a class of algorithms that make the locally optimal choice at each stage in the hope of finding the global optimum.' },\r\n];\r\n\r\nconst Study = () => {\r\n  const [selectedTopic, setSelectedTopic] = useState(null);\r\n\r\n  const handleTopicClick = (topic) => {\r\n    if (selectedTopic === topic.id) {\r\n      setSelectedTopic(null); // Close the topic if it’s already open\r\n    } else {\r\n      setSelectedTopic(topic.id); // Show details for the selected topic\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Code Academy - DSA Topics</h2>\r\n      <div className=\"topics-list\">\r\n        {topics.map((topic) => (\r\n          <div key={topic.id} className=\"topic-item\" onClick={() => handleTopicClick(topic)}>\r\n            <h3>{topic.name}</h3>\r\n            {selectedTopic === topic.id && (\r\n              <p>{topic.description}</p>\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Study;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}