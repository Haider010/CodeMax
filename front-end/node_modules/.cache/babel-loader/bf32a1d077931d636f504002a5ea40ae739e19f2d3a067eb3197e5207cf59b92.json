{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\haide\\\\Desktop\\\\University\\\\db ai\\\\leetcode-project\\\\front-end\\\\src\\\\components\\\\AIAssist.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './styles/AIAssist.css'; // You can add custom CSS for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AIAssist = () => {\n  _s();\n  const [userInput, setUserInput] = useState('');\n  const [messages, setMessages] = useState([{\n    sender: 'AI',\n    text: 'Hello! How can I assist you today?'\n  }]);\n  const isLoggedIn = localStorage.getItem('userLoggedIn') === 'true'; // Check login status from localStorage\n\n  // Handle user input and AI response (mock for now)\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    // Check if the user is logged in before sending a message\n    if (!isLoggedIn) {\n      alert('You need to log in to send a message!');\n      return; // Do not proceed if the user is not logged in\n    }\n    if (userInput.trim() !== '') {\n      setMessages([...messages, {\n        sender: 'User',\n        text: userInput\n      }, {\n        sender: 'AI',\n        text: 'This is a mock AI response.'\n      } // You can replace this with an actual AI API call\n      ]);\n      setUserInput('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ai-assist\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"AI Assist\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.sender.toLowerCase()}`,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [message.sender, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: message.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"chat-input-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userInput,\n        onChange: e => setUserInput(e.target.value),\n        placeholder: \"Type your message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(AIAssist, \"MLvKDP5Jg2xeUc9UyzYcTW63L4g=\");\n_c = AIAssist;\nexport default AIAssist;\nvar _c;\n$RefreshReg$(_c, \"AIAssist\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","AIAssist","_s","userInput","setUserInput","messages","setMessages","sender","text","isLoggedIn","localStorage","getItem","handleSubmit","e","preventDefault","alert","trim","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","message","index","toLowerCase","onSubmit","type","value","onChange","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/haide/Desktop/University/db ai/leetcode-project/front-end/src/components/AIAssist.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './styles/AIAssist.css'; // You can add custom CSS for styling\r\n\r\nconst AIAssist = () => {\r\n  const [userInput, setUserInput] = useState('');\r\n  const [messages, setMessages] = useState([\r\n    { sender: 'AI', text: 'Hello! How can I assist you today?' },\r\n  ]);\r\n  \r\n  const isLoggedIn = localStorage.getItem('userLoggedIn') === 'true'; // Check login status from localStorage\r\n\r\n  // Handle user input and AI response (mock for now)\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    // Check if the user is logged in before sending a message\r\n    if (!isLoggedIn) {\r\n      alert('You need to log in to send a message!');\r\n      return; // Do not proceed if the user is not logged in\r\n    }\r\n\r\n    if (userInput.trim() !== '') {\r\n      setMessages([\r\n        ...messages,\r\n        { sender: 'User', text: userInput },\r\n        { sender: 'AI', text: 'This is a mock AI response.' }, // You can replace this with an actual AI API call\r\n      ]);\r\n      setUserInput('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"ai-assist\">\r\n      <h2>AI Assist</h2>\r\n      <div className=\"chat-box\">\r\n        {messages.map((message, index) => (\r\n          <div\r\n            key={index}\r\n            className={`message ${message.sender.toLowerCase()}`}\r\n          >\r\n            <span>{message.sender}:</span>\r\n            <p>{message.text}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <form onSubmit={handleSubmit} className=\"chat-input-form\">\r\n        <input\r\n          type=\"text\"\r\n          value={userInput}\r\n          onChange={(e) => setUserInput(e.target.value)}\r\n          placeholder=\"Type your message...\"\r\n        />\r\n        <button type=\"submit\">Send</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AIAssist;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}